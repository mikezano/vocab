@using Models;

<div 
    class="
        card 
        border-0 
        m-1
        @GetCardState()
        @OnFadeForNextClass
        @OnFinalClass"
>
    <CallbackOnCssAnimationEnd CssAnimationName="flip-card" OnCssAnimationCompleted="OnCorrectGuess">
        <CallbackOnCssAnimationEnd CssAnimationName="reset-card" OnCssAnimationCompleted="OnFadeForNext">
            <CallbackOnCssAnimationEnd CssAnimationName="unflip-card" OnCssAnimationCompleted="OnFinal">
                <div class="card-body p-0 ">
                    <div class="card-front border @GetCorrectnessBorder()">
                        <h1>@Word.Spanish</h1>
                        <input type="text" class="my-2" @bind="CurrentGuess" />
                        <button class="btn btn-secondary" @onclick="Guess">Guess</button>
                    </div>
                    <div class="card-back d-flex align-items-center justify-content-center">
                        <h2>@Word.English</h2>
                    </div>
                </div>
            </CallbackOnCssAnimationEnd>
        </CallbackOnCssAnimationEnd>
    </CallbackOnCssAnimationEnd>
</div>


@code {

    [Parameter]
    public BasicWord Word { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public EventCallback<int> OnCorrect { get; set; }

    public int Duration { get; set; } = 200;

    public string OnFadeForNextClass { get; set; } = String.Empty;
    public string OnFinalClass { get; set; } = String.Empty;

    private bool? _isCorrect;
    public bool? IsCorrect
    {
        get { return _isCorrect; }
        set
        {
            _isCorrect = value;
            GetCorrectnessClass();
            GetCorrectnessBorder();
        }
    }
    public string CurrentGuess { get; set; }

    public async Task OnCorrectGuess(string animationName)
    {
        Console.WriteLine("Invoke next call " + animationName);
        if (IsCorrect.Value)
        {
            CurrentGuess = "";
            OnFadeForNextClass = "card-is-resetting";
            await OnCorrect.InvokeAsync(Id);
        }

    }

    public async Task OnFadeForNext(string cssPropertyName) {
        OnFinalClass = "card-is-unflipped";
    }

    public async Task OnFinal(string animationName)
    {
        Console.WriteLine("OnFinal " + animationName);
    }

    private void Guess()
    {
        IsCorrect = CurrentGuess == Word.English;
        //if (IsCorrect.Value)
        //{
        //    Console.WriteLine("Invoke animation");
        //}
        //else
        //{
        //    Console.WriteLine("No match yet");
        //}
    }

    private string GetCardState()
    {
        if (IsCorrect.HasValue)
        {
            return IsCorrect.Value ? "card-is-flipped" : String.Empty;
        }
        return String.Empty;
    }

    private string GetCorrectnessClass()
    {
        if (IsCorrect.HasValue)
        {
            return IsCorrect.Value ? "card-is-correct" : "card-is-wrong";
        }
        return String.Empty;
    }

    private string GetCorrectnessBorder()
    {
        if (IsCorrect.HasValue)
        {
            return IsCorrect.Value ? "border-success" : "border-danger";
        }
        return "border-primary";
    }




}
