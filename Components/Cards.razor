@using Vocab.State
@using Vocab.Models
@inject AppState AppState
@inject IJSRuntime JS


<div class="d-flex flex-wrap justify-content-center">
    @if (AppState.Translations.Any())
    {
        @foreach (var (choice, index) in Choices.Select((value, i) => (value, i)))
        {
            <Card MultipleChoices="@choice" Id="@index" OnSelect="HandleGuess" OnFlipDone="HandleFlipDone" />
        }
    }
</div>

@code {
    private List<TranslationMultipleChoices> Choices { get; set; } = new();
    private int _selectedCardIndex = -1;
    private int _visibleCardsCount = 0;
    private TranslationMultipleChoices? NextTranslation { get; set; }
    public int VisibleCardCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var dimensions = await JS.InvokeAsync<BrowserDimensions>("Web.getDimensions");
        VisibleCardCount = dimensions.GetVisibleCardCount();
        Choices = AppState.GetMultipleChoiceSets(VisibleCardCount);
    }   

    private void HandleGuess((Answer answer, int cardId) args)
    {
        if(args.answer.IsCorrect)
        {
            int index = AppState.Translations.FindIndex(i => i.Word == args.answer.Translation);
            AppState.UpdateCorrectGuess(index);
        }
        else
        {
            AppState.UpdateIncorrectGuesses();
        };

        _selectedCardIndex = args.cardId;
        NextTranslation = AppState.GetMultipleChoiceSets(1).FirstOrDefault();

        if (NextTranslation != null)
        {
            Choices[_selectedCardIndex] = NextTranslation;

        }
        else
        {
            Choices.RemoveAt(_selectedCardIndex);
        }
    }

    public void HandleFlipDone()
    {
        //Choices[_selectedCardIndex].Answer = NextTranslation?.Answer ?? string.Empty;
        //Choices[_selectedCardIndex].Answer = "Yo";
        StateHasChanged();
    }
}
